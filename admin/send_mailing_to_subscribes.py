from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from firebase_admin import db

from filters.is_admin import IsAdmin
from filters.is_prof_bureau import IsProfBureau
from handlers import basic
from keyboards.builder_keyboard import build_kb
from utils.states import Mailing

"""
Only admin and prof bureau command
Copy message from admin and send to all subscription users 
"""
router = Router()


# /send or Mailing
@router.message(lambda msg: IsAdmin(msg).__call__(), Command("send"))
@router.message(lambda msg: IsAdmin(msg).__call__(), F.text.lower().in_(['—Ä–∞—Å—Å—ã–ª–∫–∞', 'üì£ —Ä–∞—Å—Å—ã–ª–∫–∞']))
@router.message(lambda msg: IsProfBureau(msg).__call__(), Command("send"))
@router.message(lambda msg: IsProfBureau(msg).__call__(), F.text.lower().in_(['—Ä–∞—Å—Å—ã–ª–∫–∞', 'üì£ —Ä–∞—Å—Å—ã–ª–∫–∞']))
async def which_role(message: Message, state: FSMContext):
    """
    Ask for which role is message
    :param message: Message
    :param state: FSMContext
    """
    await state.set_state(Mailing.for_which_role)
    await message.answer("‚ú® –î–ª—è –∫–æ–≥–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞?", reply_markup=build_kb(["–î–ª—è –≤—Å–µ—Ö", "–î–ª—è –ø—Ä–æ—Ñ–±—é—Ä–æ"]))


@router.message(Mailing.for_which_role)
async def set_message(message: Message, state: FSMContext):
    """
    Send to admin info message, and waiting for mailing message
    :param message: Message
    :param state: FSMContext
    """
    await state.update_data(for_which_role=message.text)
    data = await state.get_data()
    if data["for_which_role"].lower() == '–¥–ª—è –≤—Å–µ—Ö' or data["for_which_role"].lower() == '–¥–ª—è –ø—Ä–æ—Ñ–±—é—Ä–æ' or data[
        "for_which_role"].lower() == '–¥–ª—è –ø—Ä–æ—Ñ –±—é—Ä–æ':
        await state.set_state(Mailing.message)
        await message.answer(f"–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è —Å–∫–æ–ø–∏—Ä—É—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
                             f"‚Ñπ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º\n"
                             f"‚ú≥ –ï—Å–ª–∏ —É–∂–µ –Ω–µ –Ω—É–∂–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞", reply_markup=build_kb("–û—Ç–º–µ–Ω–∞"))
    else:
        await message.answer(f'‚û° {message.from_user.first_name}, –Ω–∞–ø–∏—à–∏ –ª–∏–±–æ: "–î–ª—è –≤—Å–µ—Ö", –ª–∏–±–æ: "–î–ª—è –ø—Ä–æ—Ñ–±—é—Ä–æ"')
        await which_role(message, state)


@router.message(Mailing.message)
async def copy_and_send_message_to_users(message: Message, bot: Bot, state: FSMContext):
    """
    Copy admin message and send to all subscribes or prof bureau only, if the cancel button was pressed, returns to menu

    Send to admin info with count of subscription users
    :param message: Message
    :param bot: Bot
    :param state: FSMContext
    """
    await state.update_data(message=message.text)
    data = await state.get_data()
    await state.clear()
    # Need for refactoring
    if data["message"] is not None:
        if data["message"].lower() != '–æ—Ç–º–µ–Ω–∏—Ç—å' and data["message"].lower() != '–æ—Ç–º–µ–Ω–∞':
            users = db.reference('users').get()
            count = 0
            for user, value in users.items():
                if data["for_which_role"].lower() == '–¥–ª—è –ø—Ä–æ—Ñ–±—é—Ä–æ' or data[
                    "for_which_role"].lower() == '–¥–ª—è –ø—Ä–æ—Ñ –±—é—Ä–æ':
                    if value['role']['prof_bureau']:
                        try:
                            await bot.copy_message(chat_id=user, from_chat_id=message.chat.id,
                                                   message_id=message.message_id)
                        except TelegramForbiddenError:
                            continue
                        count += 1
                else:
                    if value['subscription']:
                        try:
                            await bot.copy_message(chat_id=user, from_chat_id=message.chat.id,
                                                   message_id=message.message_id)
                        except TelegramForbiddenError:
                            continue
                        count += 1
            if data["for_which_role"].lower() == '–¥–ª—è –ø—Ä–æ—Ñ–±—é—Ä–æ' or data["for_which_role"].lower() == '–¥–ª—è –ø—Ä–æ—Ñ –±—é—Ä–æ':
                await message.answer(f"‚Ñπ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —á–ª–µ–Ω–∞–º –ø—Ä–æ—Ñ–±—é—Ä–æ")
                print(
                    f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç {message.from_user.full_name} @{message.from_user.username} ID: "
                    f"{message.from_user.id} –¥–ª—è –ø—Ä–æ—Ñ–±—é—Ä–æ\n"
                    f"–¢–µ–∫—Å—Ç: {message.text if message.text is not None else message.caption}")
            else:
                await message.answer(f"‚Ñπ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                print(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç {message.from_user.full_name} @{message.from_user.username} ID: "
                      f"{message.from_user.id} –¥–ª—è –≤—Å–µ—Ö\n"
                      f"–¢–µ–∫—Å—Ç: {message.text if message.text is not None else message.caption}")
    else:
        users = db.reference('users').get()
        count = 0
        for user, value in users.items():
            if data["for_which_role"].lower() == '–¥–ª—è –ø—Ä–æ—Ñ–±—é—Ä–æ' or data["for_which_role"].lower() == '–¥–ª—è –ø—Ä–æ—Ñ –±—é—Ä–æ':
                if value['role']['prof_bureau']:
                    try:
                        await bot.copy_message(chat_id=user, from_chat_id=message.chat.id,
                                               message_id=message.message_id)
                    except TelegramForbiddenError:
                        continue
                    count += 1
            else:
                if value['subscription']:
                    try:
                        await bot.copy_message(chat_id=user, from_chat_id=message.chat.id,
                                               message_id=message.message_id)
                    except TelegramForbiddenError:
                        continue
                    count += 1
        if data["for_which_role"].lower() == '–¥–ª—è –ø—Ä–æ—Ñ–±—é—Ä–æ' or data["for_which_role"].lower() == '–¥–ª—è –ø—Ä–æ—Ñ –±—é—Ä–æ':
            await message.answer(f"‚Ñπ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —á–ª–µ–Ω–∞–º –ø—Ä–æ—Ñ–±—é—Ä–æ")
            print(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç {message.from_user.full_name} @{message.from_user.username} ID: "
                  f"{message.from_user.id} –¥–ª—è –ø—Ä–æ—Ñ–±—é—Ä–æ\n"
                  f"–¢–µ–∫—Å—Ç: {message.caption if message.caption is not None else '(—Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞)'}")
        else:
            await message.answer(f"‚Ñπ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            print(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç {message.from_user.full_name} @{message.from_user.username} ID: "
                  f"{message.from_user.id} –¥–ª—è –≤—Å–µ—Ö\n"
                  f"–¢–µ–∫—Å—Ç: {message.caption if message.caption is not None else '(—Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞)'}")
    await basic.menu(message)
