import logging

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from firebase_admin import db

from filters.is_admin import IsAdmin
from handlers import basic
from keyboards.builder_keyboard import rmk, build_kb
from utils.states import BanUser

"""
Only admin command
Ban/unban a user by his ID 
"""

router = Router()


# /ban or Ban user command
@router.message(IsAdmin(), Command("ban"))
@router.message(IsAdmin(), F.text.lower().in_(['‚õî –∑–∞–±–∞–Ω–∏—Ç—å/—Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–∑–∞–±–∞–Ω–∏—Ç—å', '—Ä–∞–∑–±–∞–Ω–∏—Ç—å']))
async def ban_user_set_id(message: Message, state: FSMContext):
    """
    Requests Telegram user ID for blocking
    :param message: Message
    :param state: FSMContext
    """
    await state.set_state(BanUser.ban_id)
    await message.answer("‚Äº –ù–∞–ø–∏—à–∏ ID –∫–æ–≥–æ –Ω–∞–¥–æ –∑–∞–±–∞–Ω–∏—Ç—å/—Ä–∞–∑–±–∞–Ω–∏—Ç—å")


@router.message(BanUser.ban_id)
async def ban_user_set_reason(message: Message, state: FSMContext):
    """
    Requests reason for blocking and set state of user's ID
    :param message: Message
    :param state: FSMContext
    """
    await state.update_data(ban_id=message.text)
    await state.set_state(BanUser.reason)
    await message.answer("‚ùó –ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–ª–∏–±–æ –≤—ã–±–µ—Ä–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ)",
                         reply_markup=build_kb(["–°–ø–∞–º", "–§–ª—É–¥", "–ú–∞—Ç—ã"]))


@router.message(BanUser.reason)
async def ban_user(message: Message, state: FSMContext, bot: Bot):
    """
    Ban/unban the user and returns the administrator to the menu
    :param message: Message
    :param state: FSMContext
    :param bot: Bot
    """
    await state.update_data(reason=message.text)
    data = await state.get_data()
    ban_id = data["ban_id"]
    reason = data["reason"]
    ban_username = str(db.reference(f'/users/{ban_id}/username').get())
    await state.clear()
    # If user with this ID is exist
    if db.reference(f'/users/{ban_id}').get() is not None:
        # If user with this ID already banned
        if bool(db.reference(f'/users/{ban_id}/ban/banned').get()) is True:
            db.reference(f'/users/{ban_id}/ban/banned').set(False)
            db.reference(f'/users/{ban_id}/ban/ban_reason').set(reason)
            logging.info(f"–ê–¥–º–∏–Ω: @{message.from_user_username} —Ä–∞–∑–±–∞–Ω–∏–ª @{ban_username}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
            await bot.send_message(int(ban_id), "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–±—è —Ä–∞–∑–±–∞–Ω–∏–ª–∏ üéâ\n\n"
                                                "–°–æ–≤–µ—Ç—É—é —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ üòâ")
            await message.answer(f"‚úÖ {ban_username} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω")
        # If user isn't banned
        else:
            db.reference(f'/users/{ban_id}/ban/banned').set(True)
            db.reference(f'/users/{ban_id}/ban/ban_reason').set(reason)
            logging.info(f"–ê–¥–º–∏–Ω: @{message.from_user_username} –∑–∞–±–∞–Ω–∏–ª @{ban_username}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
            await bot.send_message(int(ban_id), f"–û –Ω–µ—Ç, –∫–∞–∂–µ—Ç—Å—è, —Ç–µ–±—è –∑–∞–±–∞–Ω–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üò®\n\n"
                                                f"‚ñ∂ –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {reason}\n"
                                                f"‚ú≥ –î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è: {db.reference('main-admin-username').get()}",
                                   reply_markup=rmk)
            await message.answer(f"‚õî {db.reference(f'/users/{ban_id}/username').get()} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω")
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    await basic.menu(message)
